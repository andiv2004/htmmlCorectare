<!DOCTYPE html>
<html lang="ro">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Autocorectare a Examenelor de Admitere-produs dezvoltat de DTDA</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&family=Fira+Code:wght@400;500&display=swap" rel="stylesheet">
    <style>
        :root {
            --primary-color: #3B82F6;
            --primary-hover-color: #2563EB;
            --secondary-color: #6B7280;
            --secondary-hover-color: #4B5563;
            --success-color: #10B981;
            --success-hover-color: #059669;
            --danger-color: #EF4444;
            --danger-hover-color: #DC2626;
            --warning-color: #F59E0B;
            --info-color: #3B82F6;
            --light-bg-color: #F9FAFB;
            --widget-bg-color: #FFFFFF;
            --text-primary-color: #1F2937;
            --text-secondary-color: #4B5563;
            --border-color: #E5E7EB;
            --font-family: 'Poppins', sans-serif;
            --mono-font-family: 'Fira Code', monospace;
            --shadow-sm: 0 1px 2px 0 rgba(0, 0, 0, 0.05);
            --shadow-md: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
            --border-radius: 0.5rem;
            --transition-speed: 0.3s;
        }
        body {
            display: flex;
            font-family: var(--font-family);
            margin: 0;
            background-color: var(--light-bg-color);
            color: var(--text-primary-color);
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
        }
        .sidebar {
            width: 260px;
            background-color: var(--widget-bg-color);
            padding: 2rem 1.5rem;
            min-height: 100vh;
            box-shadow: var(--shadow-md);
            display: flex;
            flex-direction: column;
            border-right: 1px solid var(--border-color);
            position: fixed;
            top: 0;
            left: 0;
            z-index: 1000;
        }
        .sidebar h2 {
            color: var(--primary-color);
            margin-top: 0;
            font-size: 1.6rem;
            font-weight: 700;
            padding-bottom: 1rem;
            text-align: center;
        }
        .sidebar .mode-toggle button {
            width: 100%;
            text-align: left;
            background: transparent;
            font-size: 1rem;
            font-weight: 500;
            cursor: pointer;
            text-decoration: none;
            color: var(--text-secondary-color);
            display: block;
            padding: 0.9rem 1.2rem;
            border-radius: var(--border-radius);
            transition: background-color var(--transition-speed), color var(--transition-speed), transform var(--transition-speed);
            border: none;
            margin-bottom: 0.75rem;
        }
        .sidebar .mode-toggle button:hover {
            background-color: var(--light-bg-color);
            color: var(--primary-hover-color);
            transform: translateX(5px);
        }
        .sidebar .mode-toggle button.active-mode {
            background-color: var(--primary-color);
            color: white;
            font-weight: 600;
            box-shadow: var(--shadow-sm);
        }
        .main-content {
            margin-left: 260px;
            flex-grow: 1;
            padding: 2.5rem;
            overflow-y: auto;
            height: 100vh;
        }
        .content-section {
            display: none;
            animation: fadeIn 0.5s ease-in-out;
        }
        @keyframes fadeIn { from { opacity: 0; transform: translateY(10px); } to { opacity: 1; transform: translateY(0); } }
        .content-section.active { display: block; }
        .container {
            background: var(--widget-bg-color);
            padding: 2rem;
            border-radius: var(--border-radius);
            box-shadow: var(--shadow-md);
            margin-bottom: 2rem;
        }
        h1, h2, h3 { color: var(--text-primary-color); margin: 0 0 1rem 0; font-weight: 600; }
        h1 { font-size: 2rem; padding-bottom: 1rem; border-bottom: 1px solid var(--border-color); color: var(--primary-color); }
        h2 { font-size: 1.5rem; margin-top: 2rem; margin-bottom: 1.5rem; }
        h3 { font-size: 1.25rem; }
        form { margin: 1.5rem 0; padding: 2rem; border: 1px solid var(--border-color); border-radius: var(--border-radius); background-color: #fdfdfd; }
        label { display: block; margin-bottom: 0.5rem; font-weight: 500; color: var(--text-secondary-color); }
        input[type="file"], input[type="text"], select, textarea {
            padding: 0.75rem 1rem; margin-bottom: 1rem; border: 1px solid var(--border-color);
            border-radius: var(--border-radius); font-size: 1rem; width: 100%; box-sizing: border-box;
            transition: border-color var(--transition-speed), box-shadow var(--transition-speed); background-color: #fff; font-family: var(--font-family);
        }
        input[type="file"] { background-color: var(--light-bg-color); cursor: pointer; }
        input[type="file"]:hover { border-color: var(--primary-color); }
        input:focus, select:focus, textarea:focus {
            outline: none; border-color: var(--primary-color); box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.3);
        }
        textarea { min-height: 120px; font-family: var(--mono-font-family); white-space: pre; }
        button, .button-like {
            padding: 0.75rem 1.5rem; background-color: var(--primary-color); color: white; border: none;
            border-radius: var(--border-radius); cursor: pointer;
            transition: background-color var(--transition-speed), box-shadow var(--transition-speed), transform var(--transition-speed);
            font-size: 1rem; font-weight: 500; margin-right: 0.5rem; display: inline-flex;
            align-items: center; justify-content: center; text-decoration: none;
        }
        button:hover, .button-like:hover { background-color: var(--primary-hover-color); box-shadow: var(--shadow-md); transform: translateY(-2px); }
        button:disabled, button:disabled:hover { background-color: var(--secondary-color); cursor: not-allowed; transform: none; box-shadow: none; opacity: 0.7; }
        button.secondary { background-color: var(--secondary-color); }
        button.secondary:hover { background-color: var(--secondary-hover-color); }
        button.danger { background-color: var(--danger-color); }
        button.danger:hover { background-color: var(--danger-hover-color); }
        button.success { background-color: var(--success-color); }
        button.success:hover { background-color: var(--success-hover-color); }
        .flash-messages { list-style-type: none; padding: 0; margin: 0 0 1.5rem 0; }
        .flash-messages li {
            padding: 1rem 1.5rem; margin: 0.5rem 0; border-radius: var(--border-radius);
            font-weight: 500; border: 1px solid transparent; display: flex; align-items: center;
        }
        .flash-messages li.info    { background-color: #E0F2FE; color: #0C4A6E; border-color: #BAE6FD; }
        .flash-messages li.error   { background-color: #FEE2E2; color: #991B1B; border-color: #FECACA; }
        .flash-messages li.warning { background-color: #FEF3C7; color: #92400E; border-color: #FDE68A; }
        .flash-messages li.success { background-color: #D1FAE5; color: #065F46; border-color: #A7F3D0; }
        .analysis-results { margin-top: 2rem; padding: 2rem; border: 1px solid var(--border-color); border-radius: var(--border-radius); background-color: #FDFDFD; }
        .analysis-results h3.expandable-header {
            cursor: pointer; color: var(--primary-color); display: inline-flex; align-items: center;
            transition: color var(--transition-speed); font-weight: 600;
        }
        .analysis-results h3.expandable-header:hover { color: var(--primary-hover-color); }
        .analysis-results h3.expandable-header::after {
            content: 'â–¼'; font-size: 0.8em; margin-left: 0.5rem; transition: transform var(--transition-speed);
        }
        .analysis-results h3.expandable-header:not(.expanded)::after { transform: rotate(-90deg); }
        .analysis-results table {
            width: 100%; border-collapse: collapse; margin-top: 1.5rem;
            font-size: 0.95em; box-shadow: var(--shadow-sm); border-radius: var(--border-radius); overflow: hidden;
        }
        .analysis-results th, .analysis-results td { padding: 0.8rem 1.2rem; border-bottom: 1px solid var(--border-color); text-align: left; vertical-align: middle; }
        .analysis-results th { background-color: #F3F4F6; font-weight: 600; border-bottom-width: 2px; }
        .analysis-results tr:last-child td { border-bottom: none; }
        .analysis-results tr:hover { background-color: #EBF5FF; }
        .annotated-image { max-width: 100%; height: auto; display: block; margin-top: 1.5rem; border: 1px solid var(--border-color); border-radius: var(--border-radius); box-shadow: var(--shadow-md); }
        .submission-section { margin-top: 1.5rem; padding: 1.5rem; border: 1px solid var(--border-color); border-radius: var(--border-radius); background-color: var(--light-bg-color); }
        .submission-status { margin-top: 0.5rem; font-weight: 500; padding: 0.75rem 1rem; border-radius: var(--border-radius); }
        .drive-link { color: var(--primary-color); text-decoration: none; font-weight: 500; transition: color var(--transition-speed); }
        .drive-link:hover { text-decoration: underline; color: var(--primary-hover-color); }
        .grade-container {
            display: flex; align-items: center; margin-bottom: 1.5rem; flex-wrap: wrap;
            background-color: #EBF5FF; padding: 1.5rem; border-radius: var(--border-radius);
        }
        .grade-container h3 { margin: 0; margin-right: 1.5rem; font-size: 1.75rem; color: #1E40AF; }
        .batch-verification-buttons { margin-top: 2rem; text-align: center; padding-top: 1.5rem; border-top: 1px solid var(--border-color); }
        .step-info { background-color: #EBF5FF; padding: 1rem 1.5rem; border-radius: var(--border-radius); margin-bottom: 1.5rem; border-left: 4px solid var(--primary-color); }
        .step-info p { margin: 0.25rem 0; color: #2C5282; }
        #batchProgressContainer, #singleItemProgressContainer {
            background-color: #EBF5FF; border: 1px solid #BEE3F8; padding: 1.5rem;
            border-radius: var(--border-radius); margin-top: 1.5rem;
        }
        #batchProgressContainer h3, #singleItemProgressContainer h3 { color: #2C5282; margin-top: 0; font-weight: 600; }
        progress[value] {
            width: 100%; height: 1rem; border-radius: 1rem; overflow: hidden; appearance: none; margin: 0.5rem 0;
        }
        progress[value]::-webkit-progress-bar { background-color: #E5E7EB; }
        progress[value]::-webkit-progress-value { background-color: var(--primary-color); transition: width var(--transition-speed) ease-in-out; }
        progress[value]::-moz-progress-bar { background-color: var(--primary-color); }
        #batchFailedFilesContainer { margin-top: 1rem; }
        #batchFailedFilesList { list-style-type: disc; color: var(--danger-color); padding-left: 1.5rem; }
        #batchFailedFilesList li { margin-bottom: 0.25rem; }
        .answer-pair {
            display: inline-block; padding: 0.3rem 0.6rem; margin: 0.2rem; background-color: #E5E7EB;
            border-radius: 4px; font-family: var(--mono-font-family); font-size: 0.9em; border: 1px solid #D1D5DB; color: #374151;
        }
        hr { border: none; border-top: 1px solid var(--border-color); margin: 2.5rem 0; }
    </style>
</head>
<body>
    <div class="sidebar">
        <h2>Autocorectare - DTDA</h2>
        <div class="mode-toggle">
            <button id="showSingleScanMode" onclick="window.location.href='{{ url_for('main_route', mode='single') }}';" class="{{ 'active-mode' if active_mode == 'single' else '' }}">AnalizeazÄƒ o Foaie</button>
            <button id="showBatchMode" onclick="window.location.href='{{ url_for('main_route', mode='batch') }}';" class="{{ 'active-mode' if active_mode == 'batch' else '' }}">AnalizeazÄƒ Lot Foi</button>
            <button id="showKeysMode" onclick="window.location.href='{{ url_for('main_route', mode='keys') }}';" class="{{ 'active-mode' if active_mode == 'keys' else '' }}">GestioneazÄƒ È˜abloane</button>
        </div>
    </div>

    <div class="main-content">
        {% with messages = get_flashed_messages(with_categories=true) %}
            {% if messages %}
            <ul class="flash-messages">
                {% for category, message in messages %}
                    {% if not ((category == 'error' or category == 'success') and (active_mode == 'keys' or form_action_error_on_keys)) %}
                        <li class="{{ category }}">{{ message }}</li>
                    {% endif %}
                {% endfor %}
            </ul>
            {% endif %}
        {% endwith %}

        <div id="singleScanSection" class="content-section {{ 'active' if active_mode == 'single' else '' }}">
            <div class="container">
                <h1>AnalizeazÄƒ o singurÄƒ foaie de examen</h1>
                {% if single_scan_step == 1 %}
                    <h2>Pasul 1: IntroduceÈ›i ID-ul Studentului</h2>
                    <form method="POST" action="{{ url_for('main_route') }}">
                        <input type="hidden" name="form_action" value="single_scan_step_1">
                        <input type="hidden" name="active_mode_on_submit" value="single">
                        <label for="student_id_input">ID Student:</label>
                        <input type="text" id="student_id_input" name="student_id_input" value="{{ single_scan_student_id or '' }}" required>
                        <button type="submit">UrmÄƒtorul</button>
                    </form>
                {% elif single_scan_step == 2 %}
                    <h2>Pasul 2: SelectaÈ›i È˜ablonul de RÄƒspuns</h2>
                    <div class="step-info"><p><strong>ID Student:</strong> {{ single_scan_student_id }}</p></div>
                    <form method="POST" action="{{ url_for('main_route') }}">
                        <input type="hidden" name="form_action" value="single_scan_step_2">
                        <input type="hidden" name="active_mode_on_submit" value="single">
                        <label for="answer_key_select_single">SelecteazÄƒ È˜ablonul de RÄƒspuns:</label>
                        <select id="answer_key_select_single" name="answer_key_select_single" required>
                            {% for key in answer_keys %}
                                <option value="{{ key }}" {% if key == single_scan_selected_key %}selected{% endif %}>{{ key }}</option>
                            {% endfor %}
                            {% if not answer_keys %}<option value="" disabled>Nu sunt È™abloane disponibile</option>{% endif %}
                        </select>
                        <button type="submit" {% if not answer_keys %}disabled{% endif %}>UrmÄƒtorul</button>
                        <button type="button" onclick="resetSingleScanViaPost();" class="secondary">ReseteazÄƒ</button>
                    </form>
                {% elif single_scan_step == 3 %}
                    <h2>Pasul 3: ÃŽncÄƒrcaÈ›i Foaia de Examen</h2>
                    <div class="step-info">
                        <p><strong>ID Student:</strong> {{ single_scan_student_id }}</p>
                        <p><strong>È˜ablon de RÄƒspuns:</strong> {{ single_scan_selected_key }}</p>
                    </div>
                    <form method="POST" enctype="multipart/form-data" action="{{ url_for('main_route') }}">
                        <input type="hidden" name="form_action" value="single_scan_step_3">
                        <input type="hidden" name="active_mode_on_submit" value="single">
                        <label for="exam_image_single">ÃŽncÄƒrcaÈ›i Foaia de Examen:</label>
                        <input type="file" id="exam_image_single" name="exam_image" accept="image/png, image/jpeg, image/bmp, image/tiff" required>
                        <button type="submit">AnalizaÈ›i Examenul</button>
                        <button type="button" onclick="resetSingleScanViaPost();" class="secondary">ReseteazÄƒ</button>
                    </form>
                {% elif single_scan_step == 4 and single_scan_results_data %}
                    <div class="analysis-results">
                        <h2>Rezultatele Analizei</h2>
                        <p><strong>ID Student (Introdus):</strong> {{ single_scan_results_data.input_student_id }}</p>
                        {% if single_scan_results_data.student_id != single_scan_results_data.input_student_id %}
                                <p><strong>ID Student (Detectat pe Foaie):</strong> {{ single_scan_results_data.student_id }}</p>
                        {% endif %}
                        <p><strong>È˜ablon de RÄƒspuns Utilizat:</strong> {{ single_scan_results_data.selected_answer_key }}</p>
                        <div class="grade-container">
                            <h3>NotÄƒ: {{ "%.2f"|format(single_scan_results_data.grade|float) if single_scan_results_data.grade is not none else 'N/A' }} / 10</h3>
                            {% if verificare_umana %}
                                <button onclick="sendSingleExamToNocoDB()" class="success">Trimite la NocoDB & Drive</button>
                            {% else %}
                                <p style="margin-left: 15px;"><em>Verificarea umanÄƒ este necesarÄƒ pentru a salva rezultatele.</em></p>
                            {% endif %}
                        </div>
                        <div class="submission-section">
                                <div id="single_exam_submission_status" class="submission-status" style="display:none;"></div>
                                <div id="single_exam_drive_link_container" style="display: none; margin-top:10px;">
                                    <a id="single_exam_drive_link" href="#" target="_blank" class="drive-link"></a>
                                </div>
                                <div id="singleItemProgressContainer" style="display:none;">
                                    <h3>Procesare finalizare (ID: <span id="singleItemBatchIdValue"></span>)</h3>
                                    <progress id="singleItemProgressBar" value="0" max="1"></progress>
                                    <p><span id="singleItemProgressText">0</span> / <span id="singleItemTotalItemsText">1</span></p>
                                    <p id="singleItemCompleteMessage" style="display:none; color: var(--success-color); font-weight: bold;"></p>
                                </div>
                        </div>
                        <h3 onclick="toggleExpandableTable(this, 'singleAnswersTable')" class="expandable-header">RÄƒspunsuri Detectate</h3>
                        <table id="singleAnswersTable" style="display:none;">
                            <thead><tr><th>ÃŽntrebare</th><th>RÄƒspuns Detectat</th></tr></thead>
                            <tbody>
                            {% if single_scan_results_data.answers %}
                                {% for q, ans in single_scan_results_data.answers.items()|sort(attribute='0') %}
                                <tr><td>{{ q }}</td><td>{{ ans }}</td></tr>
                                {% endfor %}
                            {% else %}
                                <tr><td colspan="2">Niciun rÄƒspuns detectat.</td></tr>
                            {% endif %}
                            </tbody>
                        </table>
                        {% if single_scan_results_data.csv_filename %}
                            <p style="margin-top:15px;"><a href="{{ url_for('download_csv_route', filename=single_scan_results_data.csv_filename) }}" class="drive-link" download>DescarcÄƒ CSV</a></p>
                        {% endif %}
                        
                        {% if single_scan_results_data.annotated_img_web_path %} <h3 onclick="toggleExpandableTable(this, 'singleAnnotatedImageContainer')" class="expandable-header expanded" style="margin-top:15px;">Imagine AdnotatÄƒ</h3>
                            <div id="singleAnnotatedImageContainer" style="display:block;">
                                <img src="{{ url_for('static', filename=single_scan_results_data.annotated_img_web_path) }}?t={{ range(1, 10000)|random }}" alt="Foaie Examen AdnotatÄƒ" class="annotated-image"> </div>
                        {% else %}
                            <p style="margin-top:15px;"><em>Nicio imagine adnotatÄƒ.</em></p>
                        {% endif %}
                        <hr>
                        <a href="#" onclick="event.preventDefault(); resetSingleScanViaPost();" class="button-like">AnalizeazÄƒ AltÄƒ Foaie</a>
                    </div>
                {% else %}
                     <p>ÃŽncepeÈ›i prin a introduce un ID de student sau <a href="#" onclick="event.preventDefault(); resetSingleScanViaPost();" class="drive-link">resetaÈ›i</a>.</p>
                {% endif %}
            </div>
        </div>

        <div id="batchModeSection" class="content-section {{ 'active' if active_mode == 'batch' else '' }}">
            <div class="container">
                <h1>Procesare Lot Examene</h1>
                
                <h2>Pasul 1: ÃŽncÄƒrcaÈ›i Foile de Examen</h2>
                <p>SelectaÈ›i una sau mai multe imagini (png, jpg, jpeg, bmp, tiff). Acestea vor fi adÄƒugate Ã®n folderul de procesare.</p>
                <form action="{{ url_for('upload_batch_files_route') }}" method="post" enctype="multipart/form-data">
                    <div>
                        <label for="batch_files_upload">SelectaÈ›i fiÈ™ierele:</label>
                        <input type="file" id="batch_files_upload" name="batch_files" multiple required 
                               accept="image/png, image/jpeg, image/bmp, image/tiff" onchange="updateFileCount()">
                        <span id="file_count_display" style="margin-left: 15px; color: var(--text-secondary-color);"></span>
                    </div>
                    <button type="submit">ÃŽncarcÄƒ FiÈ™iere</button>
                </form>

                <hr>

                <h2>Pasul 2: AnalizaÈ›i Lotul</h2>
                <p>AceastÄƒ acÈ›iune va procesa <strong>toate</strong> fiÈ™ierele din folderul '{{ UPLOAD_FOLDER_NAME }}'.</p>
                <form id="batch-analysis-initiate-form" action="{{ url_for('main_route') }}" method="post">
                    <input type="hidden" name="form_action" value="initiate_batch_analysis">
                    <input type="hidden" name="active_mode_on_submit" value="batch">
                    <label for="answer_key_batch_select">SelecteazÄƒ È˜ablonul de RÄƒspuns pentru Lot:</label>
                    <select id="answer_key_batch_select" name="answer_key_batch_select">
                        {% for key in answer_keys %}
                            <option value="{{ key }}" {% if key == selected_answer_key_batch %}selected{% endif %}>{{ key }}</option>
                        {% endfor %}
                        {% if not answer_keys %}<option value="" disabled>Niciun È™ablon disponibil.</option>{% endif %}
                    </select>
                    <button type="submit" id="analyze_all_button" {% if not answer_keys %}disabled{% endif %}>AnalizeazÄƒ Toate FiÈ™ierele</button>
                </form>

                <div id="batchProgressContainer" style="display:none; margin-top: 20px;">
                    <h3>Procesare Lot Aprobare (ID: <span id="batchProcessIdValue"></span>)</h3>
                    <progress id="batchProgressBar" value="0" max="100"></progress>
                    <p><span id="batchProgressText">0</span> / <span id="batchTotalItemsText">0</span> elemente procesate.</p>
                    <p id="batchCompleteMessage" style="display:none; color: var(--success-color); font-weight: bold;">Procesare lot finalizatÄƒ!</p>
                    <div id="batchFailedFilesContainer" style="margin-top: 15px;">
                        <h4>Detalii fiÈ™iere cu erori (dacÄƒ existÄƒ):</h4>
                        <ul id="batchFailedFilesList"></ul>
                    </div>
                </div>


                {% if batch_results_for_display %}
                    <div class="batch-results analysis-results">
                        <h2>Rezultate AnalizÄƒ Lot {% if pending_batch_verification_data_exists and verificare_umana %}(Verificare Ã®n AÈ™teptare){% endif %}</h2>
                        {% if pending_batch_verification_data_exists and verificare_umana %}
                            <p>RevizuiÈ›i rezultatele. AprobaÈ›i pentru a salva Ã®n NocoDB/Drive (procesare Ã®n fundal).</p>
                        {% elif not verificare_umana and batch_results_for_display %}
                            <p>Verificare dezactivatÄƒ. Rezultatele procesate local.</p>
                        {% elif not pending_batch_verification_data_exists and batch_results_for_display %}
                             <p>Analiza lotului completÄƒ. {% if verificare_umana %}Niciun element nu necesitÄƒ verificare.{% else %}Verificarea a fost dezactivatÄƒ.{% endif %}</p>
                        {% endif %}
                        <table>
                            <thead>
                                <tr>
                                    <th>ID Student</th><th>NotÄƒ</th><th>Status Local</th><th>Previzualizare (Local)</th>
                                    <th>È˜ablon</th><th>FiÈ™ier Original</th>
                                    {% if verificare_umana %}<th>AcÈ›iuni</th>{% endif %}
                                </tr>
                            </thead>
                            <tbody>
                            {% for result in batch_results_for_display %}
                                <tr id="batch-item-row-{{ loop.index0 }}">
                                    <td>{{ result.student_id }}</td>
                                    <td>{{ "%.2f"|format(result.grade|float) if result.grade is not none else 'N/A' }}</td>
                                    <td>{{ result.status }}</td>
                                    <td>
                                        {% if result.web_annotated_image_path %}
                                            <a href="{{ url_for('static', filename=result.web_annotated_image_path) }}?t={{ range(1,10000)|random }}" target="_blank" class="drive-link">Vezi Imagine</a>
                                        {% elif result.status == 'Annot. Img Missing' %} Imagine LipsÄƒ
                                        {% else %} N/A {% endif %}
                                    </td>
                                    <td>{{ result.answer_key_used }}</td>
                                    <td>{{ result.original_filename }}</td>
                                    {% if verificare_umana %}
                                    <td style="text-align: center;">
                                        {% if "Ready for Verification" in result.status %}
                                        <button class="danger" style="padding: 6px 12px; font-size: 0.9em; margin: 2px; display: inline-flex; align-items: center; gap: 5px;"
                                                title="EliminÄƒ acest examen din lotul curent de verificare."
                                                onclick="confirmDiscardBatchItem('{{ result.original_filename }}', '{{ result.student_id }}', 'batch-item-row-{{ loop.index0 }}')">
                                            <span style="font-size: 1.1em;">&#128465;</span> EliminÄƒ
                                        </button>
                                        {% endif %}
                                    </td>
                                    {% endif %}
                                </tr>
                            {% endfor %}
                            </tbody>
                        </table>
                        {% if pending_batch_verification_data_exists and verificare_umana %}
                            <form id="verifyBatchForm" action="{{ url_for('verify_batch_action_route') }}" method="post" class="batch-verification-buttons">
                                <input type="hidden" name="active_mode_on_submit" value="batch">
                                <button type="submit" name="action" value="approve" class="success">AprobÄƒ Lotul RÄƒmas & FinalizeazÄƒ</button>
                                <button type="submit" name="action" value="reject" class="danger">Respinge Lotul RÄƒmas & È˜terge Local</button>
                            </form>
                        {% endif %}
                    </div>
                {% elif request.form.get('form_action') == 'initiate_batch_analysis' and not batch_results_for_display %}
                    <p>Niciun rezultat. VerificaÈ›i directorul '{{ UPLOAD_FOLDER_NAME }}' È™i logurile.</p>
                {% endif %}
            </div>
        </div>

        <div id="keysSection" class="content-section {{ 'active' if active_mode == 'keys' else '' }}">
             <div class="container">
                <h1>Gestionare È˜abloane RÄƒspunsuri</h1>
                {% with messages = get_flashed_messages(with_categories=true) %}
                    {% if messages and (active_mode == 'keys' or form_action_error_on_keys) %}
                    <ul class="flash-messages">
                        {% for category, message in messages %}
                            {% if category == 'error' or category == 'success' %}
                                <li class="{{ category }}">{{ message }}</li>
                            {% endif %}
                        {% endfor %}
                    </ul>
                    {% endif %}
                {% endwith %}

                {% if session.user_role == 'admin' %}
                <div id="manage-key-form-container">
                    <h2 id="manage-key-header">CreeazÄƒ È™ablon nou</h2>
                    <form method="POST" action="{{ url_for('main_route') }}" id="manage-key-form">
                        <input type="hidden" name="form_action" value="manage_answer_key">
                        <input type="hidden" name="active_mode_on_submit" value="keys">
                        <div id="edit-mode-fields"></div>
                        <div><label for="key_name_manage">Numele È™ablonului:</label><input type="text" id="key_name_manage" name="key_name_manage" required></div>
                        <div><label for="answers_string_manage">RÄƒspunsuri corecte (format: A01:B; A02:C; ...):</label><textarea id="answers_string_manage" name="answers_string_manage" rows="10" placeholder="Ex: A01:A; A02:B; ... B01:C; ... C15:D"></textarea></div>
                        <button type="submit" id="save-key-button">SalveazÄƒ È˜ablonul</button>
                        <button type="button" id="cancel-edit-button" class="secondary" style="display: none;" onclick="cancelEdit()">AnuleazÄƒ Editarea</button>
                    </form>
                </div>
                {% endif %}

                <h2>È˜abloane curente</h2>
                {% if answer_keys_data_for_view %}
                    <div class="analysis-results">
                        <table style="font-size: 0.9em;">
                            <thead>
                                <tr>
                                    <th style="width: 20%;">Nume È˜ablon</th>
                                    <th>RÄƒspunsuri Corecte</th>
                                    {% if session.user_role == 'admin' %}<th style="width: 10%;">AcÈ›iuni</th>{% endif %}
                                </tr>
                            </thead>
                            <tbody>
                                {% for key_name, answers_list in answer_keys_data_for_view.items()|sort %}
                                <tr>
                                    <td><strong>{{ key_name }}</strong></td>
                                    <td>
                                        {% for q_num, ans_list in answers_list %}
                                            <span class="answer-pair">{{ q_num }}: {{ ans_list|join(',') }}</span>
                                        {% endfor %}
                                    </td>
                                    {% if session.user_role == 'admin' %}
                                    <td>
                                        <button class="secondary" style="padding: 5px 10px; font-size: 0.9em;" onclick="populateEditForm('{{ key_name }}')">EditeazÄƒ</button>
                                    </td>
                                    {% endif %}
                                </tr>
                                {% endfor %}
                            </tbody>
                        </table>
                    </div>
                {% else %}
                    <p>Niciun È™ablon gÄƒsit.</p>
                {% endif %}
            </div>
        </div>
    </div>

    <script>
        const allAnswerKeysData = {{ answer_keys_for_js|tojson }};

        function showInitialMode() {
            const activeMode = "{{ active_mode|default('single', true) }}";
            document.getElementById('singleScanSection').style.display = 'none';
            document.getElementById('batchModeSection').style.display = 'none';
            const keysSection = document.getElementById('keysSection');
            if (keysSection) { keysSection.style.display = 'none';}
            if (activeMode === 'single') { document.getElementById('singleScanSection').style.display = 'block';
            } else if (activeMode === 'batch') { document.getElementById('batchModeSection').style.display = 'block';
            } else if (activeMode === 'keys' && keysSection) { keysSection.style.display = 'block';
            } else { document.getElementById('singleScanSection').style.display = 'block';}
        }
        function toggleExpandableTable(headerElement, contentId) {
            var content = document.getElementById(contentId);
            var isImageContainer = contentId === 'singleAnnotatedImageContainer';
            var displayStyle = isImageContainer ? 'block' : 'table';
            if (content.style.display === 'none' || content.style.display === '') {
                content.style.display = displayStyle; headerElement.classList.add('expanded');
            } else { content.style.display = 'none'; headerElement.classList.remove('expanded'); }
        }
        function sendSingleExamToNocoDB() {
            {% if active_mode == 'single' and single_scan_step == 4 and single_scan_results_data and verificare_umana %}
            const results = {{ single_scan_results_data|tojson }};
            if (!results.input_student_id || results.grade === null || !results.answers || Object.keys(results.answers).length === 0 || !results.local_annotated_image_full_path) {
                alert('Lipsesc date pentru trimitere. VerificaÈ›i rezultatele.'); return;
            }
            const statusEl = document.getElementById('single_exam_submission_status');
            const driveLinkContainerEl = document.getElementById('single_exam_drive_link_container');
            const sendButton = document.querySelector('#singleScanSection .grade-container button.success');
            statusEl.textContent = 'Status: Se trimite...'; statusEl.className = 'submission-status warning'; statusEl.style.display = 'block';
            driveLinkContainerEl.style.display = 'none'; if(sendButton) sendButton.disabled = true;

            fetch("{{ url_for('send_single_exam_to_nocodb_route') }}", {
                method: 'POST',
                headers: { 'Content-Type': 'application/json', 'X-CSRFToken': '{{ csrf_token() if csrf_token else "" }}' },
                body: JSON.stringify({
                    student_id: results.input_student_id, grade: results.grade, answers: results.answers,
                    original_uploaded_filename_for_cleanup: results.original_uploaded_filename_for_cleanup,
                    local_annotated_image_full_path: results.local_annotated_image_full_path,
                    local_csv_full_path: results.local_csv_full_path,
                    answer_key_used: results.selected_answer_key, csv_filename: results.csv_filename
                })
            })
            .then(response => response.json().then(data => ({ status: response.status, body: data })))
            .then(dataObj => {
                const data = dataObj.body; statusEl.textContent = 'Status: ' + data.message;
                if (dataObj.status === 202 && data.success) {
                    statusEl.classList.remove('warning', 'error'); statusEl.classList.add('success');
                    let progressContainer = document.getElementById('singleItemProgressContainer');
                    if (progressContainer && data.batch_processing_id && data.total_items) {
                        document.getElementById('singleItemBatchIdValue').textContent = data.batch_processing_id;
                        document.getElementById('singleItemProgressBar').max = data.total_items;
                        document.getElementById('singleItemTotalItemsText').textContent = data.total_items;
                        progressContainer.style.display = 'block';
                        updateBatchProgress(data.batch_processing_id, data.total_items, 'singleItem');
                    }
                    if(sendButton) sendButton.style.display = 'none';
                } else {
                    statusEl.classList.remove('success', 'warning'); statusEl.classList.add(dataObj.status === 403 ? 'warning' : 'error');
                    if(sendButton) sendButton.disabled = false;
                }
            })
            .catch(error => {
                statusEl.textContent = 'Status: Eroare ReÈ›ea - ' + error.message; statusEl.className = 'submission-status error';
                if(sendButton) sendButton.disabled = false;
            });
            {% else %}
            alert('Nu se poate trimite: Date incomplete, verificare dezactivatÄƒ sau mod incorect.');
            {% endif %}
        }

        function confirmDiscardBatchItem(originalFilename, studentId, rowId) {
             if (confirm(`SunteÈ›i sigur cÄƒ eliminaÈ›i examenul (${studentId} - ${originalFilename})? Acesta va fi scos din lotul de verificare.`)) {
                 discardSingleBatchItem(originalFilename, studentId, rowId);
             }
        }
        function discardSingleBatchItem(originalFilename, studentId, rowId) {
            const btn = document.querySelector(`#${rowId} button.danger`); if(btn) {btn.disabled=true; btn.innerHTML='Se È™terge&hellip;';}
            fetch("{{ url_for('discard_single_batch_item_route') }}", {
                method: 'POST', headers: {'Content-Type': 'application/json', 'X-CSRFToken': '{{ csrf_token() if csrf_token else "" }}'},
                body: JSON.stringify({original_filename: originalFilename, student_id: studentId })
            }).then(r => r.json().then(d => ({s:r.status, b:d}))).then(o => {
                if (o.b.success) { window.location.reload(); }
                else { alert('Eroare eliminare: '+(o.b.message||'Eroare server.')); if(btn){btn.disabled=false;btn.textContent='EliminÄƒ';}}
            }).catch(e => { console.error('Eroare discard:', e); alert('Eroare reÈ›ea: '+e.message); if(btn){btn.disabled=false;btn.textContent='EliminÄƒ';}});
        }
        
        function resetSingleScanViaPost() {
            fetch("{{ url_for('reset_single_scan_flow') }}", {
                method: 'POST',
                headers: {
                    'X-Requested-With': 'XMLHttpRequest',
                }
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok: ' + response.statusText);
                }
                return response.json();
            })
            .then(data => {
                if (data.success) {
                    window.location.href = "{{ url_for('main_route', mode='single') }}";
                } else {
                    alert('Failed to reset single scan: ' + (data.message || 'Unknown error from server.'));
                }
            })
            .catch(error => {
                console.error('Error during reset_single_scan POST request:', error);
                alert('An error occurred while trying to reset the scan. Please check the console and try again.');
            });
        }

        function populateEditForm(keyName) {
            if (!allAnswerKeysData[keyName]) return;

            const form = document.getElementById('manage-key-form');
            const header = document.getElementById('manage-key-header');
            const nameInput = document.getElementById('key_name_manage');
            const answersInput = document.getElementById('answers_string_manage');
            const editFieldsContainer = document.getElementById('edit-mode-fields');
            const cancelButton = document.getElementById('cancel-edit-button');

            header.textContent = `EditeazÄƒ È˜ablon: ${keyName}`;
            nameInput.value = keyName;
            answersInput.value = allAnswerKeysData[keyName];
            
            editFieldsContainer.innerHTML = `
                <input type="hidden" name="is_update" value="true">
                <input type="hidden" name="original_key_name" value="${keyName}">
            `;

            cancelButton.style.display = 'inline-block';
            form.scrollIntoView({ behavior: 'smooth' });
        }

        function cancelEdit() {
            const form = document.getElementById('manage-key-form');
            const header = document.getElementById('manage-key-header');
            const editFieldsContainer = document.getElementById('edit-mode-fields');
            const cancelButton = document.getElementById('cancel-edit-button');

            header.textContent = 'CreeazÄƒ È™ablon nou';
            form.reset();
            editFieldsContainer.innerHTML = '';
            cancelButton.style.display = 'none';
        }

        function updateFileCount() {
            const fileInput = document.getElementById('batch_files_upload');
            const countDisplay = document.getElementById('file_count_display');
            const fileCount = fileInput.files.length;
            if (fileCount > 0) {
                countDisplay.textContent = `${fileCount} fiÈ™ier(e) selectate.`;
            } else {
                countDisplay.textContent = '';
            }
        }

        function updateBatchProgress(batchId, totalItems, uiPrefix = 'batch') {
            const progressBar = document.getElementById(uiPrefix + 'ProgressBar');
            const progressTextEl = document.getElementById(uiPrefix + 'ProgressText');
            const completeMessageEl = document.getElementById(uiPrefix + 'CompleteMessage');
            const progressContainerEl = document.getElementById(uiPrefix + 'ProgressContainer');
            const totalItemsTextEl = document.getElementById(uiPrefix + 'TotalItemsText');

            if (!progressBar || !progressTextEl || !completeMessageEl || !progressContainerEl || !totalItemsTextEl) {
                console.error('One or more progress elements not found for UI prefix:', uiPrefix);
                return;
            }

            progressContainerEl.style.display = 'block';
            totalItemsTextEl.textContent = totalItems;
            progressBar.max = totalItems;
            progressBar.value = 0;
            progressTextEl.textContent = "0";
            completeMessageEl.style.display = 'none';

            const intervalId = setInterval(() => {
                fetch(`/batch_progress/${batchId}`)
                    .then(response => {
                        if (!response.ok) {
                            if (response.status === 404) {
                                console.warn(`Batch ID ${batchId} not found. Assuming completion or expiry.`);
                                completeMessageEl.textContent = "Statusul procesÄƒrii nu mai este disponibil (finalizat sau expirat).";
                                completeMessageEl.style.color = 'orange';
                                clearInterval(intervalId); return null;
                            }
                            throw new Error(`HTTP error! Status: ${response.status}`);
                        }
                        return response.json();
                    })
                    .then(data => {
                        if (!data) return;

                        if (data.error && data.error !== "Batch ID not found or expired") {
                            console.error('Error fetching progress:', data.error, data.details || '');
                            completeMessageEl.textContent = `Eroare progres: ${data.error}`;
                            completeMessageEl.style.color = 'red';
                            completeMessageEl.style.display = 'block';
                            clearInterval(intervalId);
                            return;
                        }

                        progressBar.value = data.processed;
                        progressTextEl.textContent = data.processed;

                        if (data.is_complete || data.processed >= data.total) {
                            clearInterval(intervalId);
                            progressBar.value = data.total;
                            progressTextEl.textContent = data.total;
                            completeMessageEl.textContent = "Procesare finalizatÄƒ!";
                            completeMessageEl.style.color = 'green';
                            completeMessageEl.style.display = 'block';

                            setTimeout(() => {
                                fetch("{{ url_for('clear_batch_progress_session_route') }}", {
                                    method: 'POST',
                                    headers: { 'Content-Type': 'application/json', 'X-CSRFToken': '{{ csrf_token() if csrf_token else "" }}' }
                                }).then(response => {
                                    if(response.ok) console.log("Batch progress session variables cleared.");
                                    else console.error("Failed to clear batch progress session variables.");
                                }).catch(err => console.error("Error clearing session progress vars:", err));
                            }, 7000);
                        }
                    })
                    .catch(error => {
                        console.error('Network or other error fetching batch progress:', error);
                    });
            }, 3000);
        }

        document.addEventListener('DOMContentLoaded', function() {
            showInitialMode();

            const batchIdFromSession = "{{ session.get('last_batch_processing_id', '') }}";
            const totalItemsFromSession = parseInt("{{ session.get('last_batch_total_items', 0) }}", 10);

            const batchProgressBar = document.getElementById('batchProgressBar');
            const batchProgressContainer = document.getElementById('batchProgressContainer');

            if (batchIdFromSession && totalItemsFromSession > 0 && batchProgressBar && batchProgressContainer) {
                if (parseInt(batchProgressBar.value, 10) < totalItemsFromSession) {
                    batchProgressContainer.style.display = 'block';
                    updateBatchProgress(batchIdFromSession, totalItemsFromSession, 'batch');
                } else if (parseInt(batchProgressBar.value, 10) >= totalItemsFromSession) {
                    const completeMsg = document.getElementById('batchCompleteMessage');
                    if(completeMsg) {
                        completeMsg.textContent = "Procesare lot finalizatÄƒ!";
                        completeMsg.style.display = 'block';
                        completeMsg.style.color = 'green';
                    }
                }
            }
            
            const singleItemBatchIdFromSession = "{{ session.get('last_single_item_processing_id', session.get('last_batch_processing_id', '')) }}";
            const singleItemTotalFromSession = parseInt("{{ session.get('last_single_item_total_items', session.get('last_batch_total_items', 0)) }}", 10);

            const singleItemProgressBar = document.getElementById('singleItemProgressBar');
            const singleItemProgressContainer = document.getElementById('singleItemProgressContainer');
        });
    </script>
</body>
</html>
